using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
/**
 * This script is responsible for assigning attributes to Asteroids from the game controller where the values get generated by the seed. Additionally
 * this script is repsonsible for handling collision checks between asteroids and other game objects.
 * 
 * */
public class CollisionCheckerHazard : MonoBehaviour
{
    
    public GameObject Explosion;
    public int ScoreValue;
    public int HazardHealth;
    private GameController gameController;
    private PlayerController playerController;
    private EnemyScript enemyScript;
    private GameObject gamePlayerController;
    private GameObject gameEnemyScript;
    private GameObject gameEnemyTypeTwoScript;
    private EnemyTypeTwoScript enemyTypeTwoScript;
    private GameObject gameEnemyTypeThreeScript;
    private EnemyTypeThreeScript enemyTypeThreeScript;

    //enemyHitColors - the values that control the asteroids colour when they receive damage
    private float duration = 0.05f;
    private Color originalColor;
    private Color hitColor;

    //Initialization of values
    void Start()
    {
     
        //Retrieving references to game objects
        GameObject gameControllerObject = GameObject.FindWithTag("GameController");
        gamePlayerController = GameObject.FindWithTag("Player");
   
        gameEnemyScript = GameObject.FindWithTag("EnemyShip");
      
        if (gameControllerObject != null)
        {
            gameController = gameControllerObject.GetComponent<GameController>();
        }
        if(gameController == null)
        {
            
        }


        if (gamePlayerController != null)
        {
            playerController = gamePlayerController.GetComponent<PlayerController>();
        }
        if (gamePlayerController == null)
        {
          
        }



        if (gameEnemyScript != null)
        {
            enemyScript = gameEnemyScript.GetComponent<EnemyScript>();
        }
        if (gameEnemyScript == null)
        {
          
        }
        ScoreValue = gameController.HazardScore ;
        HazardHealth = gameController.HazardHealth;
        originalColor = gameObject.GetComponent<SpriteRenderer>().color;
        hitColor = Color.gray;
    }

    void Update()
    {
        //references for these game objects had to be done in the update section as the script has to be executed constantly as these objects only appear at different stages of the game
        gameEnemyTypeTwoScript = GameObject.FindWithTag("EnemyShipTwo");
        enemyTypeTwoScript = gameEnemyTypeTwoScript.GetComponent<EnemyTypeTwoScript>();
        gameEnemyTypeThreeScript = GameObject.FindWithTag("EnemyShipThree");
        enemyTypeThreeScript = gameEnemyTypeThreeScript.GetComponent<EnemyTypeThreeScript>();

    }
    void OnCollisionEnter2D(Collision2D col)
    {
        //collision checks with player's bullets - the asteroid changes colour indicating it has received damage, the asteroid's health gets reduced by the player's bullet damage , the player's bullet gets destroyed and then the 
        //asteroid gets checked to see if its health is below 1 indicating that it should be destroyed.
        if (col.gameObject.tag == "Projectile")
        {

            gameObject.GetComponent<SpriteRenderer>().color = hitColor;
            Invoke("ResetColor", duration);
            HazardHealth = HazardHealth - playerController.BulletPower; 
            Destroy(col.gameObject);
            HazardDestroyedByPlayer();
             
        }
        //collision checks with player's bullets - the asteroid changes colour indicating it has received damage, the asteroid's health gets reduced by the player's bullet damage , the player's bullet gets destroyed and then the 
        //asteroid gets checked to see if its health is below 1 indicating that it should be destroyed.
        if (col.gameObject.tag == "Laser")
        {

            gameObject.GetComponent<SpriteRenderer>().color = hitColor;
            Invoke("ResetColor", duration);
            HazardHealth = HazardHealth - (int)playerController.LaserPower;
            HazardDestroyedByPlayer();



        }
        //collision checks with enemy bullets - the asteroid changes colour indicating it has received damage, the asteroid's health gets reduced by the enemy's bullet damage , the enemy's bullet gets destroyed and then the 
        //asteroid gets checked to see if its health is below 1 indicating that it should be destroyed.
        else if (col.gameObject.tag == "EnemyProjectile")
        {

            gameObject.GetComponent<SpriteRenderer>().color = hitColor;
            Invoke("ResetColor", duration);
            HazardHealth = HazardHealth - (int)enemyScript.EnemyShipBulletPower;
            HazardDestroyedByEnemy();
            Destroy(col.gameObject);
             
           
        }
        //collision checks with enemy bullets - the asteroid changes colour indicating it has received damage, the asteroid's health gets reduced by the enemy's bullet damage , the enemy's bullet gets destroyed and then the 
        //asteroid gets checked to see if its health is below 1 indicating that it should be destroyed.
        else if (col.gameObject.tag == "EnemyTwoProjectile" )
        {

            gameObject.GetComponent<SpriteRenderer>().color = hitColor;
            Invoke("ResetColor", duration);
            HazardHealth -= (int)enemyTypeTwoScript.EnemyShipBulletPower;
            HazardDestroyedByEnemy();
            Destroy(col.gameObject);
        }
        //collision checks with enemy bullets - the asteroid changes colour indicating it has received damage, the asteroid's health gets reduced by the enemy's bullet damage , the enemy's bullet gets destroyed and then the 
        //asteroid gets checked to see if its health is below 1 indicating that it should be destroyed.
        else if (col.gameObject.tag == "EnemyThreeProjectile")
        {

            gameObject.GetComponent<SpriteRenderer>().color = hitColor;
            Invoke("ResetColor", duration);
            HazardHealth -= (int)enemyTypeThreeScript.EnemyShipBulletPower;
            HazardDestroyedByEnemy();
            Destroy(col.gameObject);
        }
    }

    //This script controls what happens when an asteroid is defeated by player projectile. The asteroid gets destroyed, the score gets updated and an explosion special effect takes place 
    void HazardDestroyedByPlayer()
    {

        if (HazardHealth < 0)
        {
            Destroy(gameObject);
            gameController.AsteroidsDestroyedCounter++;
            gameController.AddScore(ScoreValue);
            Instantiate(Explosion, transform.position, transform.rotation);
        }
    }
    // This script controls what happens when an asteroid  is defeated by enemy projectiles. The asteroid gets destroyed and an explosion special effect takes place.
    void HazardDestroyedByEnemy()
    {

        if (HazardHealth < 0)
        {
            Destroy(gameObject);
            Instantiate(Explosion, transform.position, transform.rotation);
        }
    }

    //method for resetting the asteroids colour after it has been hit
    void ResetColor()
    {
        gameObject.GetComponent<SpriteRenderer>().color = originalColor;
    }
}
